{"version":3,"sources":["components/searcher/Searcher.js","components/todolist-item/TodoListItem.js","components/todolist/Todolist.js","components/app-header/App-header.js","components/item-status-filter/Item-status-filter.js","components/add-item/AddItem.js","App.js","serviceWorker.js","index.js"],"names":["Searcher","setSearchValue","className","type","placeholder","aria-label","aria-describedby","onChange","e","target","value","TodoListItem","label","important","done","onDelete","onToggleImportant","onToggleDone","doneStyle","onClick","Todolist","todos","element","map","item","id","itemProps","key","AppHeader","todo","ItemStatusFilter","filterOption","setFilterOption","buttonsGroup","name","classes","AddItem","addTodo","onLabelChange","useState","setLabel","setPlaceholder","submitHandler","preventDefault","trim","length","onSubmit","autoFocus","required","App","setTodos","searchValue","minId","todosCount","filter","doneCount","visibleItems","items","toLowerCase","indexOf","searchFunc","newTask","idx","findIndex","el","newTodos","splice","newImportantState","newDoneState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0UAGaA,G,YAAW,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eAItB,OACI,yBAAKC,UAAU,iCACX,2BAAOC,KAAK,OAAOD,UAAU,eAAeE,YAAY,iBACpDC,aAAW,iBAAiBC,mBAAiB,eAC7CC,SAPgB,SAACC,GACzBP,EAAeO,EAAEC,OAAOC,a,OCFnBC,G,YAAe,SAAC,GAAyE,IAAxEC,EAAuE,EAAvEA,MAAOC,EAAgE,EAAhEA,UAAWC,EAAqD,EAArDA,KAAMC,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,kBAAmBC,EAAkB,EAAlBA,aAC3EC,EAAY,eAOhB,OANa,IAATJ,IACAI,GAAa,UAEA,IAAdL,IACCK,GAAa,cAGb,yBAAKhB,UAAWgB,GACZ,0BAAMhB,UAAU,oBAAoBiB,QAAWF,GAC1CL,GAED,4BAAQT,KAAK,SAASD,UAAU,6CAA6CiB,QAAWH,GACpF,uBAAGd,UAAU,uBAEjB,4BAAQC,KAAK,SAASD,UAAU,4CAA4CiB,QAAWJ,GACnF,uBAAGb,UAAU,sBChBpBkB,EAAW,SAAC,GAAwD,IAAvDC,EAAsD,EAAtDA,MAAON,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,kBAAmBC,EAAkB,EAAlBA,aACpDK,EAAUD,EAAME,KAAI,SAACC,GAAU,IAC1BC,EAAoBD,EAApBC,GAAOC,EADkB,YACLF,EADK,QAEhC,OACI,wBAAIG,IAAOF,EAAIvB,UAAY,mBACvB,kBAAC,EAAD,iBAAkBwB,EAAlB,CAA6BX,SAAY,kBAAMA,EAASU,IACpDT,kBAAqB,kBAAMA,EAAkBS,IAC7CR,aAAgB,kBAAMA,EAAaQ,WAInD,OACI,wBAAIvB,UAAY,wBACXoB,ICdAM,G,MAAY,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,KAAMf,EAAU,EAAVA,KAC7B,OACI,yBAAKZ,UAAU,qBACX,sCACA,gCAAM2B,EAAI,UACGA,EADH,+BAAV,KAGOf,EAAI,UACEA,EADF,4BCRVgB,EAAmB,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,gBAMtCC,EALU,CACZ,CAACC,KAAM,MAAOtB,MAAO,OACrB,CAACsB,KAAM,SAAUtB,MAAO,UACxB,CAACsB,KAAM,OAAQtB,MAAO,SAEGW,KAAI,YAAoB,IAAlBW,EAAiB,EAAjBA,KAAMtB,EAAW,EAAXA,MAE/BuB,EADWJ,IAAiBG,EACP,WAAa,wBACxC,OACI,4BACI/B,KAAO,SACPD,UAAS,cAAWiC,GACpBR,IAAOO,EACPf,QAAW,WAAOa,EAAgBE,KACpCtB,MAIV,OACI,yBAAKV,UAAY,8BACZ+B,ICpBAG,G,MAAU,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,cAAmB,EACvBC,mBAAS,IADc,mBAC1C3B,EAD0C,KACnC4B,EADmC,OAEXD,mBAAS,sBAFE,mBAE1CnC,EAF0C,KAE7BqC,EAF6B,KAIjDH,EAAgB,SAAC9B,GACbgC,EAAShC,EAAEC,OAAOC,QAEtB,IAAMgC,EAAgB,SAAClC,GACnBA,EAAEmC,iBAC0B,IAAxB/B,EAAMgC,OAAOC,QACbL,EAAS,IACTC,EAAe,iCAEnBJ,EAAQzB,GACR4B,EAAS,IACTC,EAAe,wBAGnB,OACI,0BAAMvC,UAAU,kCAAkC4C,SAAYJ,GAC1D,2BAAOvC,KAAK,OAAOD,UAAU,eACzBE,YAAaA,EAAaC,aAAW,qBACrCC,mBAAiB,eACjByC,WAAW,EACXrC,MAAOE,EACPL,SAAY+B,EACZU,UAAY,IAChB,4BAAQ7C,KAAK,SAASD,UAAU,eAAeiB,QAASuB,GAAxD,eCyDGO,EA/EH,WAAM,MAGUV,mBAAS,CACjC,CAAE3B,MAAO,oBAAqBC,WAAW,EAAOC,MAAM,EAAOW,GAAI,GACjE,CAAEb,MAAO,eAAgBC,WAAW,EAAOC,MAAM,EAAOW,GAAI,GAC5D,CAAEb,MAAO,QAASC,WAAW,EAAOC,MAAM,EAAOW,GAAI,GACrD,CAAEb,MAAO,KAAMC,WAAW,EAAOC,MAAM,EAAOW,GAAI,KAPpC,mBAGTJ,EAHS,KAGF6B,EAHE,OASsBX,mBAAS,IAT/B,mBASTY,EATS,KASIlD,EATJ,OAUwBsC,mBAAS,OAVjC,mBAUTR,EAVS,KAUKC,EAVL,KAaZoB,EAAQ/B,EAAMwB,OAAS,EACrBQ,EAAahC,EAAMiC,QAAO,SAACzB,GAAD,OAAWA,EAAKf,QAAM+B,OAChDU,EAAYlC,EAAMiC,QAAO,SAACzB,GAAD,OAAUA,EAAKf,QAAM+B,OA8C9CW,EAZS,SAACC,EAAO1B,GACrB,OAAQA,GACN,IAAK,MACH,OAAO0B,EACT,IAAK,OACH,OAAOA,EAAMH,QAAO,SAAC9B,GAAD,OAAUA,EAAKV,QACrC,IAAK,SACH,OAAO2C,EAAMH,QAAO,SAAC9B,GAAD,OAAWA,EAAKV,QACtC,QACE,OAAO2C,GAGQH,CArBF,SAACG,EAAON,GACzB,OAA2B,IAAvBA,EAAYN,OACPY,EAEFA,EAAMH,QAAO,SAAC9B,GACnB,OAAOA,EAAKZ,MAAM8C,cAAcC,QAAQR,EAAYO,gBAAkB,KAgB9CE,CAAWvC,EAAO8B,GAAcpB,GAC5D,OACE,yBAAK7B,UAAU,6BACb,kBAAC,EAAD,CAAW2B,KAAMwB,EAAYvC,KAAMyC,IACnC,kBAAC,EAAD,CAASlB,QA3CG,SAACzB,GACf,IAAMiD,EAAO,sBAAOxC,GAAP,CACb,CAAET,MAAOA,EAAOC,WAAW,EAAOC,MAAM,EAAOW,GAAI2B,OACnDF,EAASW,MAyCW,IAAjBxC,EAAMwB,OACH,KACA,yBAAK3C,UAAU,qBACf,kBAAC,EAAD,CAAUD,eAAgBA,IAC1B,kBAAC,EAAD,CAAkB+B,gBAAiBA,EAAiBD,aAAgBA,KAGxE,kBAAC,EAAD,CAAUV,MAAOmC,EAAczC,SAzDhB,SAACU,GAClB,IAAMqC,EAAMzC,EAAM0C,WAAU,SAACC,GAAD,OAAQA,EAAGvC,KAAOA,KACxCwC,EAAQ,YAAO5C,GACrB4C,EAASC,OAAOJ,EAAK,GACrBZ,EAASe,IAsDLjD,kBA/CoB,SAACS,GACzB,IAAMqC,EAAMzC,EAAM0C,WAAU,SAACC,GAAD,OAAQA,EAAGvC,KAAOA,KACxC0C,EAAiB,YAAO9C,GAC9B8C,EAAkBL,GAAKjD,WAAasD,EAAkBL,GAAKjD,UAC3DqC,EAASiB,IA2CiClD,aAxCvB,SAACQ,GACpB,IAAMqC,EAAMzC,EAAM0C,WAAU,SAACC,GAAD,OAAQA,EAAGvC,KAAOA,KACxC2C,EAAY,YAAO/C,GACzB+C,EAAaN,GAAKhD,MAAQsD,EAAaN,GAAKhD,KAC5CoC,EAASkB,QClCOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACD,kBAAC,EAAD,MACJC,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2681e6db.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './Searcher.css'\r\n\r\nexport const Searcher = ({setSearchValue}) => {\r\n    const onSearchValueChange = (e) => {\r\n        setSearchValue(e.target.value)\r\n    }\r\n    return (\r\n        <div className=\"input-group mb-3 search-input\">\r\n            <input type=\"text\" className=\"form-control\" placeholder=\"type to search\" \r\n                aria-label=\"type to search\" aria-describedby=\"basic-addon2\" \r\n                onChange = {onSearchValueChange} />\r\n        </div>\r\n\r\n    )\r\n}\r\n"," import React from 'react'\r\nimport './TodoListItem.css'\r\n\r\nexport const TodoListItem = ({label, important, done, onDelete, onToggleImportant, onToggleDone}) => {\r\n    let doneStyle = 'TodoListItem'\r\n    if (done === true) {\r\n        doneStyle += ' done'\r\n    }\r\n    if(important === true) {\r\n        doneStyle += ' important'\r\n    } \r\n    return (\r\n        <div className={doneStyle}  >\r\n            <span className=\"TodoListItemLabel\" onClick = {onToggleDone}>\r\n                {label}\r\n            </span>\r\n                <button type=\"button\" className=\"btn btn-outline-success btn-sm float-right\" onClick = {onToggleImportant} >\r\n                    <i className=\"fa fa-exclamation\"/>\r\n                </button>\r\n                <button type=\"button\" className=\"btn btn-outline-danger btn-sm float-right\" onClick = {onDelete}>\r\n                    <i className=\"fa fa-trash-o\" />\r\n                </button>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport './TodoList.css'\r\nimport { TodoListItem } from '../todolist-item/TodoListItem'\r\n\r\nexport const Todolist = ({todos, onDelete, onToggleImportant, onToggleDone}) => {\r\n    const element = todos.map((item) => {\r\n        const {id, ...itemProps} = item\r\n        return (\r\n            <li key = {id} className = \"list-group-item\">\r\n                <TodoListItem {...itemProps} onDelete = {() => onDelete(id)} \r\n                    onToggleImportant = {() => onToggleImportant(id)} \r\n                    onToggleDone = {() => onToggleDone(id)} />\r\n            </li>\r\n        )\r\n    })\r\n    return (\r\n        <ul className = \"list-group todo-list\">\r\n            {element}\r\n        </ul>\r\n    )\r\n}","import React from 'react'\r\nimport './Appheader.css'\r\n\r\nexport const AppHeader = ({todo, done}) => {\r\n    return (\r\n        <div className=\"app-header d-flex\">\r\n            <h1>do it!</h1>\r\n            <h2> {todo \r\n                    ? `${todo} more to do`\r\n                    : `nothing to do`}\r\n                , {done\r\n                    ? `${done} done`\r\n                    : `nothing done`}\r\n                </h2>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const ItemStatusFilter = ({filterOption, setFilterOption}) => {\r\n    const buttons = [\r\n        {name: \"all\", label: \"all\"},\r\n        {name: \"active\", label: \"active\"},\r\n        {name: \"done\", label: \"done\"}\r\n    ]\r\n    const buttonsGroup = buttons.map(({name, label}) => {\r\n        const isActive = filterOption === name\r\n        const classes = isActive ? \"btn-info\" : \"btn-outline-secondary\" \r\n        return (\r\n            <button \r\n                type = \"button\"\r\n                className = {`btn ${classes}`}\r\n                key = {name}\r\n                onClick = {() => {setFilterOption(name)}}\r\n            >{label}</button>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className = \"btn-group input-group mb-3\">\r\n            {buttonsGroup}\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport './AddItem.css'\r\n\r\nexport const AddItem = ({addTodo, onLabelChange}) => {\r\n    const [label, setLabel] = useState(\"\")\r\n    const [placeholder, setPlaceholder] = useState(\"what I need to do?\")\r\n\r\n    onLabelChange = (e) => {\r\n        setLabel(e.target.value)\r\n    }\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        if (label.trim().length === 0) {\r\n            setLabel(\"\")\r\n            setPlaceholder(\"THE FIELD CAN NOT BE EMPTY!\")\r\n        } else {\r\n        addTodo(label)\r\n        setLabel(\"\")\r\n        setPlaceholder(\"what I need to do?\")\r\n        }\r\n    }\r\n    return (\r\n        <form className=\"input-group mb-3 add-item-input\" onSubmit = {submitHandler} >\r\n            <input type=\"text\" className=\"form-control\" \r\n                placeholder={placeholder} aria-label=\"what I need to do?\" \r\n                aria-describedby=\"basic-addon2\" \r\n                autoFocus={true}\r\n                value={label}\r\n                onChange = {onLabelChange} \r\n                required = {true} />\r\n            <button type=\"button\" className=\"btn btn-info\" onClick={submitHandler}>\r\n                    add task\r\n            </button>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { Searcher } from './components/searcher/Searcher';\nimport { Todolist } from './components/todolist/Todolist';\nimport { AppHeader } from './components/app-header/App-header';\nimport { ItemStatusFilter } from './components/item-status-filter/Item-status-filter';\nimport { AddItem } from './components/add-item/AddItem';\n\nconst App = () => {\n\n  // state\n  const [todos, setTodos] = useState([\n    { label: 'Make awesome apps', important: false, done: false, id: 1 },\n    { label: 'Do your best', important: false, done: false, id: 2 },\n    { label: 'Go on', important: false, done: false, id: 3 },\n    { label: 'Ok', important: false, done: false, id: 4 }\n  ])\n  const [searchValue, setSearchValue] = useState(\"\")\n  const [filterOption, setFilterOption] = useState(\"all\")\n\n  // functions\n  let minId = todos.length + 1\n  const todosCount = todos.filter((todo) => !todo.done).length\n  const doneCount = todos.filter((todo) => todo.done).length\n  const deleteItem = (id) => {\n    const idx = todos.findIndex((el) => el.id === id)\n    const newTodos = [...todos];\n    newTodos.splice(idx, 1);\n    setTodos(newTodos);\n  }\n  const addTodo = (label) => {\n    const newTask = [...todos,\n    { label: label, important: false, done: false, id: minId++ }]\n    setTodos(newTask)\n  }\n  const onToggleImportant = (id) => {\n    const idx = todos.findIndex((el) => el.id === id)\n    const newImportantState = [...todos];\n    newImportantState[idx].important = !newImportantState[idx].important;\n    setTodos(newImportantState);\n  }\n\n  const onToggleDone = (id) => {\n    const idx = todos.findIndex((el) => el.id === id)\n    const newDoneState = [...todos];\n    newDoneState[idx].done = !newDoneState[idx].done;\n    setTodos(newDoneState);\n  }\n  const searchFunc = (items, searchValue) => {\n    if (searchValue.length === 0) {\n      return items\n    }\n    return items.filter((item) => {\n      return item.label.toLowerCase().indexOf(searchValue.toLowerCase()) > -1\n    })\n  }\n\n  const filter = (items, filterOption) => {\n    switch (filterOption) {\n      case \"all\":\n        return items\n      case \"done\":\n        return items.filter((item) => item.done)\n      case \"active\":\n        return items.filter((item) => !item.done)\n      default:\n        return items\n    }\n  }\n  const visibleItems = filter(searchFunc(todos, searchValue), filterOption)\n  return (\n    <div className=\" container main-container\">\n      <AppHeader todo={todosCount} done={doneCount} />\n      <AddItem addTodo={addTodo} />\n      {todos.length === 0\n        ? null\n        : <div className=\"app-header d-flex\">\n          <Searcher setSearchValue={setSearchValue} />\n          <ItemStatusFilter setFilterOption={setFilterOption} filterOption = {filterOption}/>\n        </div>\n      }\n      <Todolist todos={visibleItems} onDelete={deleteItem}\n        onToggleImportant={onToggleImportant} onToggleDone={onToggleDone} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n        <App />,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}